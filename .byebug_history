c
message_interlocutor(message).first_name
message_interlocutor(message)
message_interlocutor
message.first_name
message.name
message
c
@reciever.first_name
@reciever
@reciver
c
current_user.update_attributes(:current_location=>params[:user][:current_location])
current_user.update_attributes(params[:user][:current_location])
User.update_attributes(params[:user][:current_location])
params[:user][:current_location]
params[:user].current_location
params[:user]
params
c
current_user.user_education_details.first
current_user.user_education_details
current_user
c
@user_connection.count ==1
@user_connection
@user_connection.count="1"
@user_connection.count
@user_connection.save
@user_connection.connected_user_id=params[:id]
@user_connection
params
@user_connection = current_user.user_connections.build
current_user.user_connections.build
current_user.user_connections
current_user
params
c
current_user.user_connections.first.save
current_user.user_connections.save
current_user.user_connections.first.connected_user_id="3"
current_user.user_connections.connected_user_id="3"
current_user.user_connections
current_user.user_connections.build
current_user.user_connections.count = "1"
current_user.user_connections.build
params
    params.require(:users).permit(:user_connections => [:user_id,:count,:connect_user_id]) 
current_user.user_connections.build(3)
params
params[:id]
current_user.user_connections.build(params[:id])
current_user.user_connections.build
current_user.user_connections
current_user
    params.require(:user).permit(:user_connections => [:user_id,:count,:connect_user_id]) 
params
current_user.id
current_user
params
c
params[:my_id]
params
c
params[:connection_id]
params
c
!params[:email].present?
params[:email].present?
params[:email].present ?
params[:email]
params
c
params
c
params
c
current_user.id
current_user
params
c
@user.email
@user
c
self
@user
user
c
User.where(:industry => 'it').map(&:industry)
User.where(:industry => 'it').map(&:id)
User.all.count
User.where(:industry => 'it').count
User.where(:industry => 'it')
User
User.find.all(1)
User.find.all
params
paams
c
current_user.update_attributes(education_details_params)
current_user.create(education_details_params)
current_user.build(education_details_params)
current_user
current_user.update_attributes(education_details_params)
@user = User.update_attributes(education_details_params)
education_details_params=params.require(:user).permit(user_education_details_attributes: [:user_education_details_id,:higest_education,:specilization,:institute,:passing_year, '_destroy'])
@user = User.build(education_details_params)
current_user.user_education_details.build(education_details_params(nested))
current_user.user_education_details
c
current_user.user_education_details.create(education_details_paramsc)
current_user.user_education_details.create(education_details_params(nested))
current_user.user_education_details.create(education_details_params)
current_user.user_education_details.create(nested)
current_user.user_education_details.create(nestd)
current_user.user_education_details.create(education_details_params)
current_user.user_education_details.create(education_details_params(nested))
nested
c
cc
c
params[:user][:user_education_details_attributes]
params[:user]
params
c
detail
c
details.first
details
detail
education_details_params
education_details_params.map(&:values)
education_details_params
details
params.require(:user).permit(user_education_details_attributes: [:user_education_details_id,:higest_education,:specilization,:institute,:passing_year, '_destroy'])
params.require(:user).permit( {:user_education_details_attributes => [:id , :higest_education,:specilization,:institute,:passing_year]})
current_user.user_education_details.build(education_details_params[])
current_user.user_education_details.build(education_details_params)
current_user.user_education_details.build(details)
details
current_user.user_education_details.build(detail)
current_user.user_education_details
current_user
details.last.values.first[:higest_education]
details.last.values.first.to_h
details.last.values.first.to_a
details.last.values.first.toa
details.last.values.first
details.last.values
details.last.values.first.methods
details.last.values.first
details.last.values.first("higest_education")
details.last.values.first.higest_education
details.last.values.first
details.last.values
details.last.keys
details.last
details.keys
details.first
details.higest_education
details
details.methods
details.parse
details
details.to_a
details
details.to_h
details
details.last
details.first
details
details.keys
details.methods
details
c
education_details_params.first
education_details_params
 current_user.user_education_details.build(education_details_params)
education_details_params=   params.require(:user).permit( {:user_education_details_attributes => [:id , :higest_education,:specilization,:institute,:passing_year]})
params.require(:user).permit( {:user_education_details_attributes => [:id , :higest_education,:specilization,:institute,:passing_year]})
c
params.require(:user).permit(:user_education_details_attributes)
whitelisted
c
us.build(education_details_params)
us=current_user.user_education_details
current_user.user_education_details.count
current_user.user_education_details
us.first
us
us = current_user.user_education_details.build
us.build
us.create
us.creare
us = current_user.user_education_details.new
current_user.user_education_details.new
current_user.user_education_details.build
current_user.user_education_details << education_details_params
current_user.user_education_details = Array.new
current_user.user_education_details = []
current_user.user_education_details.count
current_user.user_education_details
education_details_params
current_user.user_education_details.build(education_details_params)
current_user.user_education_details.build
current_user.user_education_details.count
current_user.user_education_details
current_user
education_detail
education_detail.create(education_details_params)
education_detail.create
education_detail.build
education_detail
c
current_user.user_education_details.first.buildc0ducation_details_params)
current_user.user_education_details.first.build(education_details_params)
current_user.user_education_details.first
current_user.user_education_details.build(education_details_params)
education_details_params=params.require(:user).permit(user_education_details_attributes: [:user_education_details_id,:higest_education,:specilization,:institute,:passing_year, '_destroy'])
 params.require(:user).permit(user_education_details_attributes: [:user_education_details_id,:higest_education,:specilization,:institute,:passing_year, '_destroy'])
current_user.user_education_details.build(education_details_params)
education_details_params= params.require(:user).permit(:higest_education,:specilization,:user_education_details_attributes => nested_keys)
 params.require(:user).permit(:higest_education,:specilization,:user_education_details_attributes => nested_keys)
 params.require(:user).permit(:higest_education,:specilization,:user_education_details_attributes => nested_keys
nested_keys = params.require(:user).fetch(:user_education_details_attributes, {}).values
nested_keys = params.require(:user).fetch(:user_education_details_attributes, {}).valyes
nested_keys = params.require(:user).fetch(:user_education_details_attributes, {}).keys
 params.require(:user).permit(:higest_education,:specilization,:user_education_details_attributes => nested_keys)
 nested_keys = params.require(:user).fetch(:user_education_details_attributes, {:higest_educatio ,:specilization}).keys
 nested_keys = params.require(:user).fetch(:user_education_details_attributes, {:higest_education,:specilization}).keys
 nested_keys = params.require(:user).fetch(:user_education_details_attributes, {:higest_education,specilization}).keys
 params.require(:user).permit(:higest_education,:specilization,:user_education_details_attributes => nested_keys)
 nested_keys = params.require(:user).fetch(:user_education_details_attributes, {}).keys
  params.require(:user).permit(:user_education_details_attributes => nested_keys)
params[:user]
params
 nested_keys = params.require(:user).fetch(:user_education_details_attributes, {}).keys
c
current_user.user_education_details.each do |test|   test.build(education_details_params)    end
current_user.user_education_details.each do |test|  end
current_user.user_education_details.build(education_details_params)
current_user.user_education_details..build(education_details_params)
current_user.user_education_details.build
current_user.user_education_details..build
current_user.user_education_details..builf
current_user.user_education_details
current_user.user_education_details.ids
current_user.user_education_details.methods
current_user.user_education_details
current_user.user_education_details.count
current_user.user_education_details
education_details_params.save
education_details_params
current_user.user_education_details.build[]
current_user.user_education_details.build(education_details_params)
education_details_params=params.require( :user ).permit(user_education_details_attributes: [ :_destroy, :institute, :higest_education, :id ])
